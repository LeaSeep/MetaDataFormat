Private Sub Worksheet_Change(ByVal Target As Range)

On Error GoTo ErrWorksheet_Change

currentPositionCell = ActiveCell.Address

Application.EnableEvents = False

    Dim Sheet As Object
    Set Sheet = ActiveWorkbook.Worksheets("Input")
    
    ' To allow multiple selections!
    ' should be somehow marked or identified automatically
    '1. find all names with DropDown_M (in Validation sheet)
     ' for each of those
    Dim SearchRange As Range, SearchResults As Range, rng_M As Range, match_DropDown_M As Range
    Dim Oldvalue As String
    Dim newvalue As String
    
    Dim SheetValidation As Object
    Set SheetValidation = ActiveWorkbook.Worksheets("Validation")
    
    Set SearchRange = SheetValidation.UsedRange
   Set SearchResults = FindAll(SearchRange, "DropDown_M")
    
    If SearchResults Is Nothing Then
        'No match found
    Else
        For Each rng_M In SearchResults
            'Loop for each match
            DropDown_M_key = rng_M.Offset(5, 0).Value
            Set match_DropDown_M = Sheet.UsedRange.Find(What:=DropDown_M_key, LookIn:=xlValues, LookAt:=xlPart, MatchCase:=True)
            If Not match_DropDown_M Is Nothing Then
                ' if drop down key is found in Input sheet
                If Not Intersect(Target, match_DropDown_M.Offset(0, Target.Column - 1)) Is Nothing Then
                    If Target.Value = "" Then GoTo exitThisSection Else
                        newvalue = Target.Value
                        Application.Undo
                        Oldvalue = Target.Value
                        
                        If Oldvalue = "" Then
                            Target.Value = newvalue
                        Else
                            If InStr(1, Oldvalue, newvalue) = 0 Then
                                Target.Value = Oldvalue & ";" & newvalue
                            Else:
                                Target.Value = Oldvalue
                            End If
                        End If
                            
                End If
            End If
        Next
    End If
     
exitThisSection:
    ' End of multiple sellection DropDown
    
    
    
    
    
' To allow Group Specific Validation
    If Target.Address = "$C$1" Then
        
        If Sheet.Cells(1, 3) = "Yes" Then
        'Call add validation with specific Input Sheet
            Call add_validation(True)
        Else
            'Call add validation with general Input Sheet
            Call add_validation(False)
        End If
    End If
    
    '' color all fields with DropDown (to indicate there is a dropdown
    Dim rng As Range
    Dim vrng As Range
    Dim objColorStop As ColorStop
    
    Set Sheet = ActiveWorkbook.Worksheets("Input")
    Set rng = ThisWorkbook.Sheets("Input").Range("A1:BB300")
    Set vrng = rng.SpecialCells(xlCellTypeAllValidation)
    
    For Each cl In vrng
        If cl.Validation.Type = 3 Then  'xlValidateList(gets only Drop Downs)
           
            cl.Interior.Pattern = xlPatternLinearGradient
            cl.Interior.Gradient.Degree = 0
            cl.Interior.Gradient.ColorStops.Clear
            
            Set objColorStop = cl.Interior.Gradient.ColorStops.Add(0)
            objColorStop.Color = vbWhite
            Set objColorStop = cl.Interior.Gradient.ColorStops.Add(0.9)
            objColorStop.Color = vbWhite
            Set objColorStop = cl.Interior.Gradient.ColorStops.Add(1)
            objColorStop.Color = RGB(191, 191, 191)
            
            
        End If
    Next
    
    
     
    
    
    Dim match_3 As Range
    Set match_3 = Sheet.Range("B:B").Find(What:="type_of_time_dependence", LookIn:=xlValues, LookAt:=xlPart, MatchCase:=True, SearchDirection:=xlNext)
    If Not match_3 Is Nothing Then
        If Target.Address = match_3.Offset(0, 1).Address Then
    
        Dim reMatch As Range
        Dim LastRow As Long
        LastRow = Sheet.Cells.Find("Sample-section", SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row

        section2LookAt = match_3.Offset(0, 1).Value
        Set reMatch = Sheet.Range("A:A").Find(What:=section2LookAt, LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=True, SearchDirection:=xlPrevious)
        No_groups = reMatch.Offset(2, 2).Value
        Set copyRange = reMatch.Offset(3, 1)
            
        ColumnLetter_start = Split(Cells(1, match_3.Cells.Column + 1).Address, "$")(1)
        ColumnLetter_end = Split(Cells(1, match_3.Cells.Column + No_groups).Address, "$")(1)
            ' put entire cols to no color
        Sheet.Range(ColumnLetter_start & match_3.Cells.Row + 1 & ":" & Split(Cells(1, match_3.Cells.Column + 100).Address, "$")(1) & match_3.Cells.Row + 1).Select
        Selection.Interior.ColorIndex = xlNone
        Selection.Delete
            ' put in no color put copy from above
           
        Sheet.Range(ColumnLetter_start & (match_3.Cells.Row + 1) & ":" & ColumnLetter_end & (match_3.Cells.Row + 1)).Select
        Selection.Value = Sheet.Range(copyRange.Offset(0, 1).Address & ":" & copyRange.Offset(0, No_groups).Address).Value
        
        Else
            Call add_requested_col_colors
        End If
    
    End If

    

    
    Dim ExperimentalSystem As Long
    ExperimentalSystem = Sheet.Range("A:A").Find("Experimental System", SearchOrder:=xlByRows, SearchDirection:=xlAfter).Row

    If Target.Address = Sheet.Cells(ExperimentalSystem + 1, 2).Address Then
        Call Insert_dep_Fields_exp
    End If
    
    Dim Measurement As Long
    Measurement = Sheet.Range("A:A").Find("Measurement", SearchOrder:=xlByRows, SearchDirection:=xlAfter).Row

    If Target.Address = Sheet.Cells(Measurement + 1, 2).Address Then
        Call Insert_dep_Fields_meas
    End If


    Call Hide_unnecassary
    Call addValidationCovars
    Call add_requested_col_colors
    Call addComment
    Call placeButtonsCorrectly

 
    Sheet.Cells.Borders.LineStyle = xlLineStyleNone
 
   Dim borders_a As Long
    borders_a = Sheet.Range("A:A").Find("total_groups", SearchOrder:=xlByRows, SearchDirection:=xlAfter).Row
    
    
    With Sheet.Rows(borders_a).Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
    End With
    
    With Sheet.Rows(borders_a).Borders(xlEdgeTop)
        .LineStyle = xlDouble
        .Weight = xlThick
    End With
    
    Dim borders_b As Long
    borders_b = Sheet.Range("A:A").Find("Sample-section", SearchOrder:=xlByRows, SearchDirection:=xlAfter).Row
 
 
     With Sheet.Rows(borders_b).Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
    End With
    
    With Sheet.Rows(borders_b).Borders(xlEdgeTop)
        .LineStyle = xlDouble
        .Weight = xlThick
    End With
    Sheet.Range(currentPositionCell).Select
    
    
    
    
    
    Application.EnableEvents = True
    Exit Sub
    
ErrWorksheet_Change:
    Application.EnableEvents = True
    MsgBox "There was a general error -> need to contact Lea Here?"
        
End Sub



Function FindAll(rng As Range, What As Variant, Optional LookIn As XlFindLookIn = xlValues, Optional LookAt As XlLookAt = xlWhole, Optional SearchOrder As XlSearchOrder = xlByColumns, Optional SearchDirection As XlSearchDirection = xlNext, Optional MatchCase As Boolean = False, Optional MatchByte As Boolean = False, Optional SearchFormat As Boolean = False) As Range
    Dim SearchResult As Range
    Dim firstMatch As String
    With rng
        Set SearchResult = .Find(What, , LookIn, LookAt, SearchOrder, SearchDirection, MatchCase, MatchByte, SearchFormat)
        If Not SearchResult Is Nothing Then
            firstMatch = SearchResult.Address
            Do
                If FindAll Is Nothing Then
                    Set FindAll = SearchResult
                Else
                    Set FindAll = Union(FindAll, SearchResult)
                End If
                Set SearchResult = .FindNext(SearchResult)
            Loop While Not SearchResult Is Nothing And SearchResult.Address <> firstMatch
        End If
    End With
End Function

